typedef long long int Int
#define expo2 30 //= the number of bit a number set can keep.
#define expo10 10
#define nDigits 256
#define nMaxSets ( nDigits / expo10 + 1 )
#define setMask ( (1lli << expo2) -1 )

class BigInteger{
public:
	BigInteger();
	BigInteger(const int&);
	BigInteger(const std::string&);
	BigInteger(const BigInteger&);
	~BigInteger();

	bool operator<(const BigInteger&) const;
	const BigInteger operator-(const BigInteger&) const;
	const BigInteger operator*(const BigInteger&) const;
	const BigInteger operator%(const BigInteger&) const;
	BigInteger& operator*=(int);
	BigInteger& operator/=(int);
	BigInteger& operator=(const BigInteger&);
	bool iseven();
	bool iszero();

	friend std::ostream& operator<<(std::ostream&, const BigInteger&);

	bool operator<(const BigInteger&) const;
	const int POSITIVE =1;
	const int ZERO = 0;
	const int NEGATIVE = -1;
	const int GREATER = 1;
	const int EQUAL = 0;
	const int LESS = -1;

private:
	bool AbsCmp(const BigInteger&)const; //Compare regardless of sign
	const BigInteger AbsSub( const BigInteger&, const BigInteger& ); //Sub regardless of sign
	const BigInteger AbsAdd( const BigInteger&, const BigInteger& ); //Add regardless of sign
	Int numberSets[ nMaxSets ] = {0};
	Int nSets;
	Int sign;
};


