#include "biginteger.h"
#include <algorithm>
#include <vector>
#include <ctime>
#include <cstdlib>
#include <string>
#include <chrono>
#define N 20
using namespace std;
string primes[] = {
"179990521",   "179991157", "179991613",  "179991923",
"179990539",   "179991167", "179991641",  "179991947",
"179990549",   "179991173", "179991653",  "179991989",
"179990579",   "179991179", "179991659",  "179992003",
"179990593",   "179991187", "179991667",  "179992031",
"179990599",   "179991211", "179991683",  "179992069",
"179990621",   "179991281", "179991689",  "179992079",
"179990627",   "179991293", "179991697",  "179992103",
"179990633",   "179991299", "179991701",  "179992123",
"179990711",   "179991377", "179991737",  "179992129",
"179990717",   "179991379", "179991739",  "179992139",
"179990803",   "179991403", "179991751",  "179992177",
"179990813",   "179991407", "179991781",  "179992207",
"179990827",   "179991437", "179991787",  "179992237",
"179990831",   "179991439", "179991817",  "179992247",
"179990873",   "179991443", "179991821",  "179992259",
"179990879",   "179991451", "179991827",  "179992271",
"179990911",   "179991473", "179991829",  "179992279",
"179990947",   "179991499", "179991841",  "179992289",
"179990981",   "179991521", "179991853",  "179992321",
"179991037",   "179991527", "179991863",  "179992331",
"179991043",   "179991533", "179991871",  "179992343",
"179991067",   "179991557", "179991881",  "179992349",
"179991083",   "179991571", "179991899",  "179992361",
"179991101",   "179991577", "179991919",  "179992363",
"15484279",    "15484771",  "15485257", "15485549",
"15484333",    "15484783",  "15485273", "15485557",
"15484363",    "15484817",  "15485287", "15485567",
"15484387",    "15484823",  "15485291", "15485581",
"15484393",    "15484873",  "15485293", "15485609",
"15484409",    "15484877",  "15485299", "15485611",
"15484421",    "15484879",  "15485311", "15485621",
"15484453",    "15484901",  "15485321", "15485651",
"15484457",    "15484919",  "15485339", "15485653",
"15484459",    "15484939",  "15485341", "15485669",
"15484471",    "15484951",  "15485357", "15485677",
"15484489",    "15484961",  "15485363", "15485689",
"15484517",    "15484999",  "15485383", "15485711",
"15484519",    "15485039",  "15485389", "15485737",
"15484549",    "15485053",  "15485401", "15485747",
"15484559",    "15485059",  "15485411", "15485761",
"15484591",    "15485077",  "15485429", "15485773",
"15484627",    "15485083",  "15485441", "15485783",
"15484631",    "15485143",  "15485447", "15485801",
"15484643",    "15485161",  "15485471", "15485807",
"15484661",    "15485179",  "15485473", "15485837",
"15484697",    "15485191",  "15485497", "15485843",
"15484709",    "15485221",  "15485537", "15485849",
"15484723",    "15485243",  "15485539", "15485857",
"15484769",    "15485251",  "15485543", "15485863",
"30721987",    "30722399",  "30722777", "30723241",
"30722051",    "30722401",  "30722801", "30723269",
"30722057",    "30722429",  "30722807", "30723271",
"30722093",    "30722431",  "30722821", "30723313",
"30722117",    "30722473",  "30722837", "30723359",
"30722129",    "30722477",  "30722843", "30723367",
"30722137",    "30722479",  "30722851", "30723401",
"30722141",    "30722491",  "30722903", "30723409",
"30722171",    "30722507",  "30722929", "30723419",
"30722203",    "30722509",  "30722957", "30723421",
"30722207",    "30722521",  "30722969", "30723461",
"30722239",    "30722567",  "30723001", "30723481",
"30722249",    "30722569",  "30723047", "30723509",
"30722257",    "30722579",  "30723053", "30723523",
"30722261",    "30722591",  "30723059", "30723533",
"30722267",    "30722609",  "30723071", "30723547",
"30722287",    "30722633",  "30723073", "30723559",
"30722291",    "30722647",  "30723083", "30723577",
"30722299",    "30722663",  "30723103", "30723593",
"30722311",    "30722701",  "30723109", "30723611",
"30722317",    "30722719",  "30723127", "30723619",
"30722323",    "30722743",  "30723169", "30723631",
"30722353",    "30722761",  "30723181", "30723701",
"30722357",    "30722771",  "30723221", "30723733",
"30722369",    "30722773",  "30723229", "30723761",
"22801761391", "22801761877", "22801762301",  "22801762861",
"22801761401", "22801761883", "22801762303",  "22801762901",
"22801761407", "22801761893", "22801762309",  "22801762933",
"22801761439", "22801761901", "22801762327",  "22801762939",
"22801761449", "22801761907", "22801762331",  "22801762943",
"22801761457", "22801761929", "22801762367",  "22801762993",
"22801761469", "22801761943", "22801762409",  "22801762999",
"22801761491", "22801761947", "22801762441",  "22801763021",
"22801761497", "22801761973", "22801762453",  "22801763027",
"22801761511", "22801762001", "22801762463",  "22801763041",
"22801761527", "22801762013", "22801762469",  "22801763119",
"22801761529", "22801762019", "22801762513",  "22801763167",
"22801761571", "22801762033", "22801762519",  "22801763183",
"22801761617", "22801762073", "22801762547",  "22801763221",
"22801761629", "22801762127", "22801762553",  "22801763239",
"22801761637", "22801762129", "22801762559",  "22801763269",
"22801761659", "22801762157", "22801762579",  "22801763273",
"22801761677", "22801762163", "22801762603",  "22801763293",
"22801761721", "22801762171", "22801762619",  "22801763321",
"22801761757", "22801762199", "22801762657",  "22801763323",
"22801761761", "22801762201", "22801762751",  "22801763389",
"22801761769", "22801762213", "22801762757",  "22801763459",
"22801761817", "22801762253", "22801762769",  "22801763471",
"22801761823", "22801762271", "22801762813",  "22801763477",
"22801761847", "22801762283", "22801762853",  "22801763489"
"32416187567",  "32416188223",  "32416188809",  "32416189391",
"32416187627",  "32416188227",  "32416188839",  "32416189459",
"32416187651",  "32416188241",  "32416188859",  "32416189469",
"32416187659",  "32416188257",  "32416188877",  "32416189493",
"32416187701",  "32416188269",  "32416188887",  "32416189499",
"32416187719",  "32416188271",  "32416188899",  "32416189511",
"32416187737",  "32416188331",  "32416188949",  "32416189573",
"32416187747",  "32416188349",  "32416189019",  "32416189633",
"32416187761",  "32416188367",  "32416189031",  "32416189657",
"32416187773",  "32416188397",  "32416189049",  "32416189669",
"32416187827",  "32416188449",  "32416189061",  "32416189681",
"32416187863",  "32416188451",  "32416189063",  "32416189717",
"32416187893",  "32416188491",  "32416189079",  "32416189721",
"32416187899",  "32416188499",  "32416189081",  "32416189733",
"32416187927",  "32416188517",  "32416189163",  "32416189753",
"32416187929",  "32416188527",  "32416189181",  "32416189777",
"32416187933",  "32416188583",  "32416189193",  "32416189853",
"32416187953",  "32416188589",  "32416189231",  "32416189859",
"32416187977",  "32416188601",  "32416189261",  "32416189867",
"32416187987",  "32416188647",  "32416189277",  "32416189877",
"32416188011",  "32416188689",  "32416189291",  "32416189909",
"32416188037",  "32416188691",  "32416189321",  "32416189919",
"32416188113",  "32416188697",  "32416189349",  "32416189987",
"32416188127",  "32416188767",  "32416189361",  "32416190039",
"32416188191",  "32416188793",  "32416189381",  "32416190071"
};

int size = sizeof(primes)/sizeof(string); 
vector<int> randomVector;

BigInteger gcd_by_binary(BigInteger a, BigInteger b){
  BigInteger n, m;
  BigInteger ans(1);

  if (a < b){
    n = a; m = b;
  }
  else{
    n = b; m = a;
  }

  while(!n.iszero() && !m.iszero()){

    if (n.iseven()){
      if (m.iseven()){
        ans *= 2;
        n /= 2;
        m /= 2;
      }
      else{
        n /= 2;
      }
    }
    else if (m.iseven()){
      m /= 2;
    }
    if (m < n){
      BigInteger tmp;
      tmp = n; n = m; m = tmp;
    }
    m = m - n;
  }
  
  return (n * ans);
}
BigInteger gcd_by_euclid( BigInteger a, BigInteger b){
  BigInteger n, m;
  if (a < b){
    n = a; m = b;
  }
  else{
    n = b; m = a;
  }

  while(!((m % n).iszero())){
    BigInteger tmp;
    tmp = n;
    n = m % n;
    m = tmp;


  }

  return n;
}
string getRandom(int& cnt){
    return primes[ randomVector[cnt++] ];
}

BigInteger* getBigInt(int& cnt){
    BigInteger* bigInt = new BigInteger(getRandom(cnt)); 
    for (int i = 0; i < N; ++i)
       (*bigInt) = (*bigInt) * BigInteger(getRandom(cnt));
    return bigInt;
}

void initializeRandomVector(void){
    for (int i = 0; i < size; ++i)
        randomVector.push_back(i);
    random_shuffle ( randomVector.begin(), randomVector.end() );
}
int main(int argc, char *argv[])
{
    srand(time(0));
    initializeRandomVector();

    BigInteger *a,*b,*m;
    BigInteger result;
    int failCnt = 0,successCnt = 0;

    std::chrono::high_resolution_clock::time_point t1 = std::chrono::high_resolution_clock::now();

    for (int i = 0; i < 1000; ++i)
    {
        int cnt = 0;
        m = getBigInt(cnt);
        a = getBigInt(cnt);
        b = getBigInt(cnt);
        //random_shuffle ( randomVector.begin(), randomVector.end() );
	#ifdef BINARY
        result = gcd_by_binary( (*a) * (*m), (*b) * (*m) ) ; 
	#endif
        #ifdef EUCLID
	result = gcd_by_euclid( (*a) * (*m), (*b) * (*m) ) ; 
	#endif
        if( result == (*m) ){
            cout<<"Pass"<<endl;
            successCnt++;
        }
        else{
            failCnt++;
            cout<<"Failed: gcd( "<<(*a) * (*m)<<" , "<<(*b) * (*m)<<" )"<<endl;
            cout<<"Expected: "<<*m<<endl;
            cout<<"Get:      "<<result<<endl;
        }

        delete a;
        delete b;
        delete m;
    }

    std::chrono::high_resolution_clock::time_point t2 = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double> time_span = std::chrono::duration_cast<std::chrono::duration<double>>(t2 - t1);

    cout<<"done!  "<<endl;
    #ifdef BINARY
    cout << "binary:" << endl;
    #endif
    #ifdef EUCLID
    cout << "euclid:" << endl;
    #endif
    
    cout<<"Total: "<<failCnt+successCnt<<endl;
    cout<<"Pass : "<<successCnt<<endl;
    cout<<"Fail : "<<failCnt<<endl;

    std::cout << "Elapsed " << time_span.count() << " seconds." << std::endl;

    return 0;
}
