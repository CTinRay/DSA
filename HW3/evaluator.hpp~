#include <functional>
#include <string>
#include <map>
#include <stack>
#include <vector>
typedef int Int;
typedef float Float;

namespace evaluate{

	struct Operate{
		bool print;
		int precedence;
		std::function<NumberType (std::stack<NumberType>)>evaluate;
	};
	typedef std::map<std::string,Operate>::iterator OpIterator;
	template<typename NumberType>
	class Evaluator{
		Evaluator(); 
	private:
		NumberType evaluate(std::string);
		static const std::map<std::string,Operate>unrOpMap;		
		static const std::map<std::string,Operate>binOpMap;		
		static const std::map<std::string,Operate>funcMan;
		void tockenize(const std::string, std::vector<std::string>&)const;
		bool isdigit( std::string );
		NumberType toDigit( std::string );
		void calculate( std::vector<NumberType>&, std::vector<OpIterator>&, int, std::string& );
	};	

	template<class C>
	std::ostream& operator << (std::ostream&, const std::vector<C>&);
	std::ostream& operator << (std::ostream&, const std::map<std::string,Operate>&a);
}
		
	
